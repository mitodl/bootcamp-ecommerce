[tool.poetry]
name = "Bootcamps"
version = "0.108.0"
description = "Bootcamps Ecommerce"
license = "BSD-3"
readme = "README.md"
packages = []
authors  = ["MIT ODL"]

[tool.poetry.dependencies]
python = "3.10.13"
django = "^4.2.13"
celery = {extras = ["redis"], version = "^5.3.6"}
boto3 = "^1.16.63"
dj-database-url = "^0.5.0"
django-anymail = {extras = ["mailgun"], version = "^8.4"}
dj-static = "^0.0.6"
django-cache-memoize = "^0.2.0"
django-classy-tags = "^4.1.0"
django-hijack = "^3.4.5"
django-filter = "^23.4"
django-fsm = "^2.8.0"
django-ipware = "^4.0.0"
django-mathfilters = "^1.0.0"
django-redis = "^5.0.0"
django-webpack-loader = "^0.7.0"
djangorestframework = "^3.15.2"
djangorestframework-serializer-extensions = "^2.0.0"
djangosaml2idp = { git = "https://github.com/OTA-Insight/djangosaml2idp.git", rev = "0b4325782a6fd2c034677b5923041b5df10087ec" } # pragma: allowlist secret
dynamic-rest = "^2.1.2"
html5lib = "^1.1"
hubspot-api-client = "^6.1.0"
django-storages = "^1.9.1"
ipython = "^8.10.0"
mitol-django-common = "^2023.12.19"
mitol-django-hubspot-api = "2023.12.19"
mitol-django-mail= "^2023.12.19"
mitol-django-authentication = "^2023.12.19"
newrelic = "^6.2.0.156"
premailer = "^3.7.0"
psycopg2 = "^2.8.6"
pycountry = "^19.8.18"
PyNaCl = "^1.5.0"
python-dateutil = "^2.8.1"
pytz = "^2022.6"
requests= "^2.20"
sentry-sdk = "^2.8.0"
social-auth-app-django = "^5.4.0"
static3 = "^0.7.0"
urllib3 = "^1.24.2"
uwsgi = "^2.0.20"
wagtail = "^5.2.1"
zeep = "^4.2.1"
Pillow = "^10.3.0"
user-util = "^0.3.0"


[tool.poetry.group.dev.dependencies]
bpython = "^0.24"
django-debug-toolbar = "^3.2.4"
hypothesis = "~4.23.9"
ipdb = "^0.13.2"
factory_boy = "^3.2.0"
faker = "^8.8.2"
nplusone = "^1.0.0"
pdbpp = "^0.10.2"
pip-tools = "^7.1.0"
pytest = "^7.4.4"
pytest-cov = "^2.6.1"
pytest-env = "^0.8.0"
pytest-django = "^4.0.0"
pytest-mock = "^1.10.1"
pytest-pylint = "^0.21.0"
pytest-lazy-fixture = "^0.6.3"
responses = "^0.25.0"
ruff = "^0.1.11"
semantic-version = "^2.8.5"
selenium = "^3.141.0"
six = "^1.16.0"
testfixtures = "^6.14.1"
tox = "^3.15.1"
wagtail-factories = "^4.1.0"

[tool.ruff]
target-version = "py39"
line-length = 88

[tool.ruff.lint]
select = [
    "A",  # flake8-builtins
    # "AIR",  # Airflow
    # "ANN",  # flake8-annotations
    "ARG",  # flake8-unused-arguments
    # "ASYNC",  # flake8-async
    "B",  # flake8-bugbear
    "BLE",  # flake8-blind-except
    "C4",  # flake8-comprehensions
    "C90",  # mccabe
    # "COM",  # flake8-commas
    # "CPY",  # flake8-copyright
    "D",  # pydocstyle
    "DJ",  # flake8-django
    "DTZ",  # flake8-datetimez
    "E",  # Pycodestyle Error
    "EM",  # flake8-errmsg
    "ERA",  # eradicate
    "EXE",  # flake8-executable
    "F",  # Pyflakes
    "FA",  # flake8-future-annotations
    "FBT",  # flake8-boolean-trap
    "FIX",  # flake8-fixme
    "FLY",  # flynt
    # "FURB",  # refurb
    "G",  # flake8-logging-format
    "I",  # isort
    "ICN",  # flake8-import-conventions
    "INP",  # flake8-no-pep420
    "INT",  # flake8-gettext
    "ISC",  # flake8-implicit-str-concat
    "N",  # pep8-naming
    # "NPY",  # NumPy-specific rules
    # "PD",  # pandas-vet
    "PERF",  # Perflint
    "PGH",  # pygrep-hooks
    "PIE",  # flake8-pie
    "PL",  # Pylint
#    "PT",  # flake8-pytest-style
    "PTH",  # flake8-use-pathlib
    "PYI",  # flake8-pyi
    "Q",  # flake8-quotes
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "RUF",  # Ruff-specific rules
#    "S",  # flake8-bandit
    "SIM",  # flake8-simplify
    "SLF",  # flake8-self
    "SLOT",  # flake8-slots
    "T10",  # flake8-debugger
    "T20",  # flake8-print
    "TCH",  # flake8-type-checking
    "TD",  # flake8-todos
    "TID",  # flake8-tidy-imports
    "TRY",  # tryceratops
    "UP",  # pyupgrade
    "W",  # Pycodestyle Warning
    "YTT",  # flake8-2020
]
ignore = [
    "B008",
    "B905",
    "D106",
    "D104",
    "D200",
    "D202",
    "D205",
    "D301",
    "D400",
    "D401",
    "E501",
    "N803",
    "N806",
    "N999",
    "PIE804",
    "PT023",
    "RET505",
    "RET506",
    "RET507",
    "RET508",
    "RUF012",
    "UP007",
    "UP032",
    "A003",
    "TRY003",
    "INP001",
    "D105",
    "D107",
    "PLR0912",
    "ISC001",
]
typing-modules = ["colour.hints"]

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.lint.per-file-ignores]
"*_test.py" = ["ARG001", "E501", "S101", "PLR2004"]
"test_*.py" = ["ARG001", "E501", "S101", "PLR2004"]
"**/migrations/**" = ["ARG001", "D101", "D100"]
"repl.py" = ["S603"]
