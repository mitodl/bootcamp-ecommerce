"""
General bootcamp utility functions
"""

import json
import logging
import os
import re

from django.core.serializers import serialize
from rest_framework import serializers


log = logging.getLogger(__name__)


def partition_around_index(list_to_partition, index):
    """
    Partitions a list around the given index, returning 2 lists. The first contains elements
    before the index, and the second contains elements after the index (the given index is excluded).

    Examples:
        partition_around_index([1,2,3,4,5], 2) == ([1,2], [4,5])
        partition_around_index([1,2,3,4,5], 0) == ([], [2,3,4,5])

    Args:
        list_to_partition (list): The list to partition
        index (int): The index that the list should be partitioned around

    Returns:
        Tuple(list, list): The partitions of the given list
    """
    list_len = len(list_to_partition)
    if list_len <= index:
        raise ValueError(
            "Index out of range: {} ({} item list)".format(index, list_len)
        )
    l1, l2 = [], []
    if index > 0:
        l1 = list_to_partition[0:index]
    if index < (list_len - 1):
        l2 = list_to_partition[(index + 1) :]
    return l1, l2


def is_blank(value):
    """
    Checks if the given value is None or a blank string

    Args:
        value (Optional[Any]): The value to check

    Returns:
        bool: True if the value is None or a blank string
    """
    return value is None or value == ""


def serialize_model_object(obj):
    """
    Serialize model into a dict representable as JSON

    Args:
        obj (django.db.models.Model): An instantiated Django model
    Returns:
        dict:
            A representation of the model
    """
    # serialize works on iterables so we need to wrap object in a list, then unwrap it
    data = json.loads(serialize("json", [obj]))[0]
    serialized = data["fields"]
    serialized["id"] = data["pk"]
    return serialized


def get_field_names(model):
    """
    Get field names which aren't autogenerated

    Args:
        model (class extending django.db.models.Model): A Django model class
    Returns:
        list of str:
            A list of field names
    """
    return [
        field.name
        for field in model._meta.get_fields()
        if not field.auto_created  # pylint: disable=protected-access
    ]


def is_empty_file(file_field):
    """
    Return True if the given file field object passed in is None or has no filename

    Args:
        file_field (django.db.models.FileField or None): A file field property of a model object

    Returns:
        bool: True if the given file field object passed in is None or has no filename
    """
    return file_field is None or not file_field.name


def get_filename_from_path(filepath):
    """
    Returns a filename without a directory path

    Args:
        filepath (str): The file path (e.g.: "/path/to/file.txt")

    Returns:
        str: The filename without the directory path (e.g.: "file.txt")
    """
    return os.path.split(filepath)[1]


def remove_html_tags(text):
    """Remove html tags from a string"""
    clean = re.compile("<.*?>")
    return re.sub(clean, "", text)


def serializer_date_format(dt):
    """
    Helper function to return a date formatted in the same way that our serializers

    Args:
        dt (Optional[datetime.datetime]): The datetime object (or None)

    Returns:
        Optional[str]: The string representing the datetime (or None)
    """
    return serializers.DateTimeField().to_representation(dt)


def format_month_day(dt, month_fmt="%b"):
    """
    Formats the month and day of a datetime

    Args:
        dt (datetime.datetime): The datetime to be formatted
        month_fmt (Optional[str]): The strftime-compatible month format

    Returns:
        str: The formatted month and day
    """
    # NOTE: This function is used instead of just 'strftime' because the '%-d' directive, which is used to produce a
    # formatted day without trailing zeros, is platform-dependent.
    return "{} {}".format(dt.strftime(month_fmt), dt.day)
